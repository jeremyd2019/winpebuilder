name: build
on:
  workflow_dispatch:
    inputs:
      lcu:
        type: string
        required: false
        description: "optional comma-delimited url(s) for lcu"
permissions:
  contents: read
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: msys2/setup-msys2@v2
        with:
          release: false
          update: true
          msystem: UCRT64
          install: mingw-w64-ucrt-x86_64-qemu-image-util
      - name: install adk
        shell: cmd
        run: |
          curl -Lo adksetup.exe "https://go.microsoft.com/fwlink/?linkid=2289980"
          start /wait adksetup.exe /q /norestart /ceip off /features OptionId.DeploymentTools
      - name: install winpe
        shell: cmd
        run: |
          curl -Lo adkwinpesetup.exe "https://go.microsoft.com/fwlink/?linkid=2289981"
          start /wait adkwinpesetup.exe /q /norestart /ceip off /features OptionId.WindowsPreinstallationEnvironment
      - name: get virtio iso
        shell: cmd
        run: |
          curl -LO https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/virtio-win.iso
          mkdir virtio-win
          tar -C virtio-win -xvf virtio-win.iso
      - name: get lcu
        if: ${{ inputs.lcu }}
        env:
          LCU: ${{ inputs.lcu }}
        shell: cmd
        run: |
          mkdir lcu
          cd lcu
          FOR %%i IN (%LCU:,= %) DO curl -LO %%i
      - name: gather arm64 drivers
        shell: bash
        run: |
          mkdir arm64
          cd virtio-win && find . -path '*/w11/ARM64/*' -exec cp --parents '{}' ../arm64 \;
      - name: copype
        shell: cmd
        run: |
          CALL "%ProgramFiles(x86)%\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\DandISetEnv.bat"
          CD /D "${{ github.workspace }}"
          CALL copype arm64 ${{ github.workspace }}\winpe_arm64
      - name: mountpe
        shell: cmd
        run: |
          CALL "%ProgramFiles(x86)%\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\DandISetEnv.bat"
          CD /D "${{ github.workspace }}"
          DISM /Mount-Image /ImageFile:"${{ github.workspace }}\winpe_arm64\media\sources\boot.wim" /Index:1 /MountDir:"${{ github.workspace }}\winpe_arm64\mount"
      - name: add drivers
        shell: cmd
        run: |
          CALL "%ProgramFiles(x86)%\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\DandISetEnv.bat"
          CD /D "${{ github.workspace }}"
          DISM /Image:"${{ github.workspace }}\winpe_arm64\mount" /Add-Driver /Driver:"${{ github.workspace }}\arm64" /Recurse /ForceUnsigned
      - name: add x64 optional component
        shell: cmd
        run: |
          CALL "%ProgramFiles(x86)%\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\DandISetEnv.bat"
          CD /D "${{ github.workspace }}"
          DISM /Image:"${{ github.workspace }}\winpe_arm64\mount" /Add-Package /PackagePath:"%WinPERoot%\arm64\WinPE_OCs\WinPE-x64-Support.cab"
          DISM /Image:"${{ github.workspace }}\winpe_arm64\mount" /Add-Package /PackagePath:"%WinPERoot%\arm64\WinPE_OCs\en-us\WinPE-x64-Support_en-us.cab"
      - name: set power profile
        shell: cmd
        run: |
          ECHO powercfg /s 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c>>"${{ github.workspace }}\winpe_arm64\mount\windows\system32\startnet.cmd"
      - name: install lcu
        if: ${{ inputs.lcu }}
        shell: cmd
        run: |
          CALL "%ProgramFiles(x86)%\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\DandISetEnv.bat"
          CD /D "${{ github.workspace }}"
          REM Windows 11 24H2 wants the latest lcu specified to PackagePath
          FOR %%i IN (lcu\*.msu) DO SET LCUMSU=%%i
          DISM /Image:"${{ github.workspace }}\winpe_arm64\mount" /Add-Package /PackagePath:%LCUMSU%
          DISM /Image:"${{ github.workspace }}\winpe_arm64\mount" /Cleanup-Image /StartComponentCleanup /ResetBase
      - name: unmountpe
        shell: cmd
        run: |
          CALL "%ProgramFiles(x86)%\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\DandISetEnv.bat"
          CD /D "${{ github.workspace }}"
          DISM /Unmount-Image /MountDir:"${{ github.workspace }}\winpe_arm64\mount" /Commit
      - name: optimize
        shell: cmd
        run: |
          CALL "%ProgramFiles(x86)%\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\DandISetEnv.bat"
          CD /D "${{ github.workspace }}"
          DISM /Export-Image /SourceImageFile:"${{ github.workspace }}\winpe_arm64\media\sources\boot.wim" /SourceIndex:1 /DestinationImageFile:"${{ runner.temp }}\boot.wim" /Compress:max
          DEL "${{ github.workspace }}\winpe_arm64\media\sources\boot.wim"
          MOVE "${{ runner.temp }}\boot.wim" "${{ github.workspace }}\winpe_arm64\media\sources\boot.wim"
      - name: makepemedia
        shell: cmd
        run: |
          CALL "%ProgramFiles(x86)%\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\DandISetEnv.bat"
          CD /D "${{ github.workspace }}"
          CALL MakeWinPEMedia /ISO ${{ github.workspace }}\winpe_arm64 winpe_arm64.iso
      - name: get qemu firmware
        shell: bash
        run: |
          BSDTAR="$(cygpath -Su)/tar.exe"
          curl -Lo qemu-efi-aarch64.deb "$(curl https://packages.debian.org/sid/all/qemu-efi-aarch64/download | sed -ne '/http:\/\/http\.us\.debian\.org/{s|^.*"http://http\.us\.\([^"]\+\)".*$|https://deb.\1|;p}')"
          $BSDTAR -xvf qemu-efi-aarch64.deb
          tar -Jxvf data.tar.xz
          mv usr/share/AAVMF/AAVMF_{CODE,VARS}.ms.fd .
          rm -rf usr control.tar.xz data.tar.xz debian-binary
      - name: make empty qcow2
        shell: msys2 {0}
        run: |
          qemu-img create -f qcow2 win11_arm64.qcow2 8G
      - uses: actions/upload-artifact@v4
        with:
          path: |
            winpe_arm64.iso
            AAVMF_CODE.ms.fd
            AAVMF_VARS.ms.fd
            qemu_aarch64_winpe.sh
            win11_arm64.qcow2
